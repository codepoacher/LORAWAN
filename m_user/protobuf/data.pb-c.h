/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: data.proto */

#ifndef PROTOBUF_C_data_2eproto__INCLUDED
#define PROTOBUF_C_data_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Subid Subid;
typedef struct _Ack Ack;
typedef struct _Gpio Gpio;
typedef struct _Voltage Voltage;
typedef struct _Gsensor Gsensor;
typedef struct _Gsensor__Accel Gsensor__Accel;
typedef struct _Gsensor__Gyro Gsensor__Gyro;
typedef struct _Gps Gps;
typedef struct _Vehic Vehic;
typedef struct _Ecu Ecu;
typedef struct _Iccard Iccard;
typedef struct _Lcd Lcd;
typedef struct _Lcd__Msg Lcd__Msg;
typedef struct _Lcd__Button Lcd__Button;
typedef struct _Printer Printer;
typedef struct _Can Can;
typedef struct _Flash Flash;


/* --- enums --- */

typedef enum _IOC {
  IOC__SET = 1,
  IOC__GET = 2,
  IOC__DATA = 3,
  IOC__SEND = 4,
  IOC__FILTER = 5,
  IOC__POWERON = 6,
  IOC__LEDON = 7,
  IOC__INIT = 8,
  IOC__CLEAR = 9,
  IOC__REBOOT = 10,
  IOC__LEDOFF = 11,
  IOC__PWROFF = 12
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IOC)
} IOC;

/* --- messages --- */

struct  _Subid
{
  ProtobufCMessage base;
  int32_t id;
  size_t n_subdata;
  ProtobufCBinaryData *subdata;
};
#define SUBID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&subid__descriptor) \
    , 0, 0,NULL }


/*
 * ack struct
 */
struct  _Ack
{
  ProtobufCMessage base;
  int32_t type;
  protobuf_c_boolean has_rev1;
  int32_t rev1;
};
#define ACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ack__descriptor) \
    , 0, 0, 0 }


/*
 * gpio struct
 */
struct  _Gpio
{
  ProtobufCMessage base;
  int32_t gpio;
  protobuf_c_boolean has_value;
  int32_t value;
};
#define GPIO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gpio__descriptor) \
    , 0, 0, 0 }


/*
 * adc struct
 */
struct  _Voltage
{
  ProtobufCMessage base;
  int32_t id;
  protobuf_c_boolean has_value;
  int32_t value;
};
#define VOLTAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&voltage__descriptor) \
    , 0, 0, 0 }


struct  _Gsensor__Accel
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
  int32_t z;
};
#define GSENSOR__ACCEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gsensor__accel__descriptor) \
    , 0, 0, 0 }


struct  _Gsensor__Gyro
{
  ProtobufCMessage base;
  int32_t x;
  int32_t y;
  int32_t z;
};
#define GSENSOR__GYRO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gsensor__gyro__descriptor) \
    , 0, 0, 0 }


/*
 * gsensor
 */
struct  _Gsensor
{
  ProtobufCMessage base;
  int32_t interval;
  Gsensor__Accel *a;
  Gsensor__Gyro *g;
};
#define GSENSOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gsensor__descriptor) \
    , 0, NULL, NULL }


/*
 * gps struct
 */
struct  _Gps
{
  ProtobufCMessage base;
  char *nmea;
};
#define GPS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&gps__descriptor) \
    , NULL }


/*
 * vehicle struct
 */
struct  _Vehic
{
  ProtobufCMessage base;
  int32_t interval;
  protobuf_c_boolean has_acc;
  int32_t acc;
  protobuf_c_boolean has_total;
  int32_t total;
  protobuf_c_boolean has_pulse;
  int32_t pulse;
};
#define VEHIC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&vehic__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0 }


/*
 * ecu info struct 
 */
struct  _Ecu
{
  ProtobufCMessage base;
  protobuf_c_boolean has_mileage;
  int32_t mileage;
  protobuf_c_boolean has_speed;
  int32_t speed;
  protobuf_c_boolean has_rotate;
  int32_t rotate;
  protobuf_c_boolean has_left_oil_percent;
  int32_t left_oil_percent;
  protobuf_c_boolean has_voltage;
  int32_t voltage;
  protobuf_c_boolean has_oil_mass;
  int32_t oil_mass;
  protobuf_c_boolean has_fault_lamp;
  int32_t fault_lamp;
  protobuf_c_boolean has_oil_temp;
  int32_t oil_temp;
  protobuf_c_boolean has_left_oil_warn;
  int32_t left_oil_warn;
  char *vin;
  protobuf_c_boolean has_interval;
  int32_t interval;
};
#define ECU__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ecu__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NULL, 0, 0 }


/*
 * iccard struct
 */
struct  _Iccard
{
  ProtobufCMessage base;
  protobuf_c_boolean has_ic;
  ProtobufCBinaryData ic;
  protobuf_c_boolean has_addr;
  uint32_t addr;
  protobuf_c_boolean has_insert;
  uint32_t insert;
};
#define ICCARD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&iccard__descriptor) \
    , 0, {0,NULL}, 0, 0, 0, 0 }


struct  _Lcd__Msg
{
  ProtobufCMessage base;
  int32_t page;
  int32_t column;
  int32_t wide;
  int32_t high;
  ProtobufCBinaryData screen;
};
#define LCD__MSG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lcd__msg__descriptor) \
    , 0, 0, 0, 0, {0,NULL} }


struct  _Lcd__Button
{
  ProtobufCMessage base;
  int32_t id;
  int32_t value;
};
#define LCD__BUTTON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lcd__button__descriptor) \
    , 0, 0 }


/*
 * lcm struct
 */
struct  _Lcd
{
  ProtobufCMessage base;
  int32_t type;
  Lcd__Button *key;
  Lcd__Msg *data;
};
#define LCD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lcd__descriptor) \
    , 0, NULL, NULL }


/*
 * printer struct
 */
struct  _Printer
{
  ProtobufCMessage base;
  ProtobufCBinaryData print;
};
#define PRINTER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&printer__descriptor) \
    , {0,NULL} }


/*
 * can struct
 */
struct  _Can
{
  ProtobufCMessage base;
  uint32_t canid;
  uint32_t id;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define CAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&can__descriptor) \
    , 0, 0, 0, {0,NULL} }


/*
 * flash struct
 */
struct  _Flash
{
  ProtobufCMessage base;
  uint32_t offset;
  uint32_t size;
  protobuf_c_boolean has_data;
  ProtobufCBinaryData data;
};
#define FLASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&flash__descriptor) \
    , 0, 0, 0, {0,NULL} }


/* Subid methods */
void   subid__init
                     (Subid         *message);
size_t subid__get_packed_size
                     (const Subid   *message);
size_t subid__pack
                     (const Subid   *message,
                      uint8_t             *out);
size_t subid__pack_to_buffer
                     (const Subid   *message,
                      ProtobufCBuffer     *buffer);
Subid *
       subid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   subid__free_unpacked
                     (Subid *message,
                      ProtobufCAllocator *allocator);
/* Ack methods */
void   ack__init
                     (Ack         *message);
size_t ack__get_packed_size
                     (const Ack   *message);
size_t ack__pack
                     (const Ack   *message,
                      uint8_t             *out);
size_t ack__pack_to_buffer
                     (const Ack   *message,
                      ProtobufCBuffer     *buffer);
Ack *
       ack__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ack__free_unpacked
                     (Ack *message,
                      ProtobufCAllocator *allocator);
/* Gpio methods */
void   gpio__init
                     (Gpio         *message);
size_t gpio__get_packed_size
                     (const Gpio   *message);
size_t gpio__pack
                     (const Gpio   *message,
                      uint8_t             *out);
size_t gpio__pack_to_buffer
                     (const Gpio   *message,
                      ProtobufCBuffer     *buffer);
Gpio *
       gpio__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gpio__free_unpacked
                     (Gpio *message,
                      ProtobufCAllocator *allocator);
/* Voltage methods */
void   voltage__init
                     (Voltage         *message);
size_t voltage__get_packed_size
                     (const Voltage   *message);
size_t voltage__pack
                     (const Voltage   *message,
                      uint8_t             *out);
size_t voltage__pack_to_buffer
                     (const Voltage   *message,
                      ProtobufCBuffer     *buffer);
Voltage *
       voltage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   voltage__free_unpacked
                     (Voltage *message,
                      ProtobufCAllocator *allocator);
/* Gsensor__Accel methods */
void   gsensor__accel__init
                     (Gsensor__Accel         *message);
/* Gsensor__Gyro methods */
void   gsensor__gyro__init
                     (Gsensor__Gyro         *message);
/* Gsensor methods */
void   gsensor__init
                     (Gsensor         *message);
size_t gsensor__get_packed_size
                     (const Gsensor   *message);
size_t gsensor__pack
                     (const Gsensor   *message,
                      uint8_t             *out);
size_t gsensor__pack_to_buffer
                     (const Gsensor   *message,
                      ProtobufCBuffer     *buffer);
Gsensor *
       gsensor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gsensor__free_unpacked
                     (Gsensor *message,
                      ProtobufCAllocator *allocator);
/* Gps methods */
void   gps__init
                     (Gps         *message);
size_t gps__get_packed_size
                     (const Gps   *message);
size_t gps__pack
                     (const Gps   *message,
                      uint8_t             *out);
size_t gps__pack_to_buffer
                     (const Gps   *message,
                      ProtobufCBuffer     *buffer);
Gps *
       gps__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   gps__free_unpacked
                     (Gps *message,
                      ProtobufCAllocator *allocator);
/* Vehic methods */
void   vehic__init
                     (Vehic         *message);
size_t vehic__get_packed_size
                     (const Vehic   *message);
size_t vehic__pack
                     (const Vehic   *message,
                      uint8_t             *out);
size_t vehic__pack_to_buffer
                     (const Vehic   *message,
                      ProtobufCBuffer     *buffer);
Vehic *
       vehic__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   vehic__free_unpacked
                     (Vehic *message,
                      ProtobufCAllocator *allocator);
/* Ecu methods */
void   ecu__init
                     (Ecu         *message);
size_t ecu__get_packed_size
                     (const Ecu   *message);
size_t ecu__pack
                     (const Ecu   *message,
                      uint8_t             *out);
size_t ecu__pack_to_buffer
                     (const Ecu   *message,
                      ProtobufCBuffer     *buffer);
Ecu *
       ecu__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ecu__free_unpacked
                     (Ecu *message,
                      ProtobufCAllocator *allocator);
/* Iccard methods */
void   iccard__init
                     (Iccard         *message);
size_t iccard__get_packed_size
                     (const Iccard   *message);
size_t iccard__pack
                     (const Iccard   *message,
                      uint8_t             *out);
size_t iccard__pack_to_buffer
                     (const Iccard   *message,
                      ProtobufCBuffer     *buffer);
Iccard *
       iccard__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   iccard__free_unpacked
                     (Iccard *message,
                      ProtobufCAllocator *allocator);
/* Lcd__Msg methods */
void   lcd__msg__init
                     (Lcd__Msg         *message);
/* Lcd__Button methods */
void   lcd__button__init
                     (Lcd__Button         *message);
/* Lcd methods */
void   lcd__init
                     (Lcd         *message);
size_t lcd__get_packed_size
                     (const Lcd   *message);
size_t lcd__pack
                     (const Lcd   *message,
                      uint8_t             *out);
size_t lcd__pack_to_buffer
                     (const Lcd   *message,
                      ProtobufCBuffer     *buffer);
Lcd *
       lcd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lcd__free_unpacked
                     (Lcd *message,
                      ProtobufCAllocator *allocator);
/* Printer methods */
void   printer__init
                     (Printer         *message);
size_t printer__get_packed_size
                     (const Printer   *message);
size_t printer__pack
                     (const Printer   *message,
                      uint8_t             *out);
size_t printer__pack_to_buffer
                     (const Printer   *message,
                      ProtobufCBuffer     *buffer);
Printer *
       printer__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   printer__free_unpacked
                     (Printer *message,
                      ProtobufCAllocator *allocator);
/* Can methods */
void   can__init
                     (Can         *message);
size_t can__get_packed_size
                     (const Can   *message);
size_t can__pack
                     (const Can   *message,
                      uint8_t             *out);
size_t can__pack_to_buffer
                     (const Can   *message,
                      ProtobufCBuffer     *buffer);
Can *
       can__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   can__free_unpacked
                     (Can *message,
                      ProtobufCAllocator *allocator);
/* Flash methods */
void   flash__init
                     (Flash         *message);
size_t flash__get_packed_size
                     (const Flash   *message);
size_t flash__pack
                     (const Flash   *message,
                      uint8_t             *out);
size_t flash__pack_to_buffer
                     (const Flash   *message,
                      ProtobufCBuffer     *buffer);
Flash *
       flash__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   flash__free_unpacked
                     (Flash *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Subid_Closure)
                 (const Subid *message,
                  void *closure_data);
typedef void (*Ack_Closure)
                 (const Ack *message,
                  void *closure_data);
typedef void (*Gpio_Closure)
                 (const Gpio *message,
                  void *closure_data);
typedef void (*Voltage_Closure)
                 (const Voltage *message,
                  void *closure_data);
typedef void (*Gsensor__Accel_Closure)
                 (const Gsensor__Accel *message,
                  void *closure_data);
typedef void (*Gsensor__Gyro_Closure)
                 (const Gsensor__Gyro *message,
                  void *closure_data);
typedef void (*Gsensor_Closure)
                 (const Gsensor *message,
                  void *closure_data);
typedef void (*Gps_Closure)
                 (const Gps *message,
                  void *closure_data);
typedef void (*Vehic_Closure)
                 (const Vehic *message,
                  void *closure_data);
typedef void (*Ecu_Closure)
                 (const Ecu *message,
                  void *closure_data);
typedef void (*Iccard_Closure)
                 (const Iccard *message,
                  void *closure_data);
typedef void (*Lcd__Msg_Closure)
                 (const Lcd__Msg *message,
                  void *closure_data);
typedef void (*Lcd__Button_Closure)
                 (const Lcd__Button *message,
                  void *closure_data);
typedef void (*Lcd_Closure)
                 (const Lcd *message,
                  void *closure_data);
typedef void (*Printer_Closure)
                 (const Printer *message,
                  void *closure_data);
typedef void (*Can_Closure)
                 (const Can *message,
                  void *closure_data);
typedef void (*Flash_Closure)
                 (const Flash *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    ioc__descriptor;
extern const ProtobufCMessageDescriptor subid__descriptor;
extern const ProtobufCMessageDescriptor ack__descriptor;
extern const ProtobufCMessageDescriptor gpio__descriptor;
extern const ProtobufCMessageDescriptor voltage__descriptor;
extern const ProtobufCMessageDescriptor gsensor__descriptor;
extern const ProtobufCMessageDescriptor gsensor__accel__descriptor;
extern const ProtobufCMessageDescriptor gsensor__gyro__descriptor;
extern const ProtobufCMessageDescriptor gps__descriptor;
extern const ProtobufCMessageDescriptor vehic__descriptor;
extern const ProtobufCMessageDescriptor ecu__descriptor;
extern const ProtobufCMessageDescriptor iccard__descriptor;
extern const ProtobufCMessageDescriptor lcd__descriptor;
extern const ProtobufCMessageDescriptor lcd__msg__descriptor;
extern const ProtobufCMessageDescriptor lcd__button__descriptor;
extern const ProtobufCMessageDescriptor printer__descriptor;
extern const ProtobufCMessageDescriptor can__descriptor;
extern const ProtobufCMessageDescriptor flash__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_data_2eproto__INCLUDED */
